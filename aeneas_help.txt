Aeneas: verification of Rust programs by translation to pure lambda calculus

Usage: aeneas/bin/aeneas [OPTIONS] FILE

  -print-error-emitters     Whenever reporting an error, print the span of the source code of Aeneas which emitted the error
  -borrow-check             Only borrow-check the program and do not generate any translation
  -backend {fstar|coq|lean|hol4}
                            Specify the target backend (fstar, coq, lean, hol4)
  -namespace                Set the namespace of the definitions in the pure model
  -dest                     Specify the output directory
  -subdir                   Extract the files in a sub-folder; this option has an impact on the import paths of the generated files
  -test-units               Test the unit functions with the concrete (i.e., not symbolic) interpreter
  -test-trans-units         Test the translated unit functions with the target theorem prover's normalizer
  -decreases-clauses        Use decreases clauses/termination measures for the recursive definitions
  -state                    Use a *state*-error monads, instead of an error monads
  -use-fuel                 Use a fuel parameter to control divergence
  -backward-state-update    Generate backward functions which update the state. THIS OPTION IS DEPRECATED.
  -no-template-clauses      Do not generate templates for the required decreases clauses/termination measures, in a dedicated file, if you also put the option -decreases-clauses
  -split-files              Split the definitions between different files for types, functions, etc.
  -checks                   Activate extensive sanity checks (warning: causes a ~100 times slow down).
  -gen-lib-entry            Add an entry point file to the generated library (only valid if the crate is split between different files)
  -lean-default-lakefile    Generate a default lakefile.lean (Lean only)
  -print-llbc               Print the imported LLBC
  -abort-on-error           Abort on the first encountered error
  -soft-warnings            Do not treat warnings as errors
  -tuple-nested-proj        Use nested projectors for tuples (e.g., (0, 1, 2).snd.fst instead of (0, 1, 2).1).
  -print-unknown-externals  Print all the external definitions which are not listed in the builtin functions
  -log                      Activate trace log for a given logger designated by its name. It is possible to specifiy a list of names if they are separated by commas without spaces; for instance: '-log Interpreter,SymbolicToPure'. The existing loggers are: {BorrowCheck, Builtin, Contexts, Errors, Extract, FunsAnalysis, Graph.ReorderDecls, Graph.SCC, Interpreter, Interpreter.Abs, Interpreter.Borrows, Interpreter.Expansion, Interpreter.Expressions, Interpreter.Invariants, Interpreter.Loops, Interpreter.LoopsFixedPoint, Interpreter.LoopsJoinCtxs, Interpreter.LoopsMatchCtxs, Interpreter.Paths, Interpreter.Projectors, Interpreter.Statements, PrePasses, PureMicroPasses, PureMicroPasses.simplify_aggregates_unchanged_fields, PureTypeCheck, PureUtils, RegionsHierarchy, SymbolicToPure, SymbolicToPureExpressions, SymbolicToPureTypes, SymbolicToPureValues, Translate, TypesAnalysis}
  -log-debug                Same as '-log' but sets the level to the more verbose 'debug' rather than 'trace'
  -mark-ids                 For developers: mark some identifiers to throw an exception if we generate them; this is useful to insert breakpoints when debugging by using the log. For example, one can mark the symbolic value ids 1 and 2 with '-mark-ids s1,s2', or '-mark-ids s@1, s@2. The supported prefixes are: 's' (symbolic value id), 'b' (borrow id), 'a' (abstraction id), 'r' (region id), 'f' (pure free variable id).
  -help                     Display this list of options
  --help                    Display this list of options
